{
	"Zustand Store": {
		"prefix": "zustandStore",
		"body": [
			"import create from 'zustand';",
			"",
			"const useStore = create((set) => ({",
			"  ${1:state}: ${2:initialState},",
			"  ${3:action}: () => set((state) => ({ ${1:state}: ${4:newState} }))",
			"}));",
			"",
			"export default useStore;"
		],
		"description": "Création d'un store Zustand"
	},
	"Zustand Use Store": {
		"prefix": "zustandUseStore",
		"body": [
			"import useStore from './${1:store}';",
			"",
			"const ${2:ComponentName} = () => {",
			"  const ${3:state} = useStore((state) => state.${3:state});",
			"  const ${4:action} = useStore((state) => state.${4:action});",
			"",
			"  return (",
			"    <div>",
			"      <h1>${3:state}</h1>",
			"      <button onClick={${4:action}}>Update State</button>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${2:ComponentName};"
		],
		"description": "Utilisation d'un hook Zustand pour accéder à l'état"
	},
	"Zustand Store TypeScript": {
		"prefix": "zustandStoreTS",
		"body": [
			"import create from 'zustand';",
			"",
			"interface ${1:StateType} {",
			"  ${2:state}: ${3:StateValue};",
			"  ${4:action}: () => void;",
			"}",
			"",
			"const useStore = create<${1:StateType}>((set) => ({",
			"  ${2:state}: ${3:initialState},",
			"  ${4:action}: () => set((state) => ({ ${2:state}: ${5:newState} }))",
			"}));",
			"",
			"export default useStore;"
		],
		"description": "Création d'un store Zustand avec TypeScript"
	},
	"Zustand Middleware": {
		"prefix": "zustandMiddleware",
		"body": [
			"import create from 'zustand';",
			"import { persist } from 'zustand/middleware';",
			"",
			"const useStore = create(persist((set) => ({",
			"  ${1:state}: ${2:initialState},",
			"  ${3:action}: () => set((state) => ({ ${1:state}: ${4:newState} }))",
			"}), {",
			"  name: '${5:storeName}',",
			"  getStorage: () => localStorage,",
			"}));",
			"",
			"export default useStore;"
		],
		"description": "Utilisation de Middleware avec Zustand"
	},
	"Zustand Global State": {
		"prefix": "zustandGlobalState",
		"body": [
			"import create from 'zustand';",
			"",
			"const useGlobalStore = create((set) => ({",
			"  ${1:globalState}: ${2:initialState},",
			"  set${3:GlobalState}: (value) => set({ ${1:globalState}: value })",
			"}));",
			"",
			"export default useGlobalStore;"
		],
		"description": "Gérer l'état global avec Zustand"
	},
	"Zustand Complete Example": {
		"prefix": "zustandCompleteExample",
		"body": [
			"import create from 'zustand';",
			"",
			"const useStore = create((set) => ({",
			"  bears: 0,",
			"  increasePopulation: () => set((state) => ({ bears: state.bears + 1 })),",
			"  removeAllBears: () => set({ bears: 0 })",
			"}));",
			"",
			"export default useStore;",
			"",
			"// Usage in a component",
			"import React from 'react';",
			"import useStore from './useStore';",
			"",
			"const BearCounter = () => {",
			"  const bears = useStore((state) => state.bears);",
			"  const increasePopulation = useStore((state) => state.increasePopulation);",
			"  const removeAllBears = useStore((state) => state.removeAllBears);",
			"",
			"  return (",
			"    <div>",
			"      <h1>{bears} around here ...</h1>",
			"      <button onClick={increasePopulation}>Increase Population</button>",
			"      <button onClick={removeAllBears}>Remove All Bears</button>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default BearCounter;"
		],
		"description": "Exemple complet de gestion d'état avec Zustand"
	},
	"Zustand Slice": {
		"prefix": "zustandSlice",
		"body": [
			"import create from 'zustand';",
			"",
			"const create${1:SliceName}Slice = (set) => ({",
			"  ${2:state}: ${3:initialState},",
			"  ${4:action}: () => set((state) => ({ ${2:state}: ${5:newState} }))",
			"});",
			"",
			"const useStore = create((set) => ({",
			"  ...create${1:SliceName}Slice(set),",
			"  // Add more slices here",
			"}));",
			"",
			"export default useStore;"
		],
		"description": "Création d'un slice Zustand"
	},
	"Zustand React Context": {
		"prefix": "zustandReactContext",
		"body": [
			"import create from 'zustand';",
			"import { createContext, useContext } from 'react';",
			"",
			"const StoreContext = createContext();",
			"",
			"const useStore = create((set) => ({",
			"  ${1:state}: ${2:initialState},",
			"  ${3:action}: () => set((state) => ({ ${1:state}: ${4:newState} }))",
			"}));",
			"",
			"export const StoreProvider = ({ children }) => {",
			"  return (",
			"    <StoreContext.Provider value={useStore}>",
			"      {children}",
			"    </StoreContext.Provider>",
			"  );",
			"};",
			"",
			"export const useStoreContext = () => {",
			"  return useContext(StoreContext);",
			"};"
		],
		"description": "Utilisation de Zustand avec React Context"
	},
	"Zustand Form State": {
		"prefix": "zustandFormState",
		"body": [
			"import create from 'zustand';",
			"",
			"const useFormStore = create((set) => ({",
			"  formData: {",
			"    ${1:field1}: '',",
			"    ${2:field2}: ''",
			"  },",
			"  setFormData: (field, value) => set((state) => ({",
			"    formData: {",
			"      ...state.formData,",
			"      [field]: value",
			"    }",
			"  })),",
			"  resetForm: () => set({",
			"    formData: {",
			"      ${1:field1}: '',",
			"      ${2:field2}: ''",
			"    }",
			"  })",
			"}));",
			"",
			"export default useFormStore;"
		],
		"description": "Gestion de l'état de formulaire avec Zustand"
	},
	"Zustand Axios API": {
		"prefix": "zustandAxiosAPI",
		"body": [
			"import create from 'zustand';",
			"import axios from 'axios';",
			"",
			"const useStore = create((set) => ({",
			"  ${1:data}: null,",
			"  ${2:loading}: false,",
			"  ${3:error}: null,",
			"  fetchData: async (url) => {",
			"    set({ ${2:loading}: true, ${3:error}: null });",
			"    try {",
			"      const response = await axios.get(url);",
			"      set({ ${1:data}: response.data, ${2:loading}: false });",
			"    } catch (error) {",
			"      set({ ${3:error}: error.message, ${2:loading}: false });",
			"    }",
			"  }",
			"}));",
			"",
			"export default useStore;"
		],
		"description": "Utilisation de Zustand avec Axios pour les requêtes API"
	},
	"Zustand Thunk Middleware": {
		"prefix": "zustandThunkMiddleware",
		"body": [
			"import create from 'zustand';",
			"import { devtools, redux } from 'zustand/middleware';",
			"",
			"const initialState = {",
			"  ${1:state}: ${2:initialStateValue},",
			"};",
			"",
			"const reducer = (state = initialState, action) => {",
			"  switch (action.type) {",
			"    case '${3:ACTION_TYPE}':",
			"      return {",
			"        ...state,",
			"        ${1:state}: ${4:updatedStateValue}",
			"      };",
			"    default:",
			"      return state;",
			"  }",
			"};",
			"",
			"const useStore = create(devtools(redux(reducer, initialState)));",
			"",
			"export default useStore;"
		],
		"description": "Utilisation de Thunk Middleware avec Zustand"
	},
	"Zustand Devtools": {
		"prefix": "zustandDevtools",
		"body": [
			"import create from 'zustand';",
			"import { devtools } from 'zustand/middleware';",
			"",
			"const useStore = create(devtools((set) => ({",
			"  ${1:state}: ${2:initialState},",
			"  ${3:action}: () => set((state) => ({ ${1:state}: ${4:newState} }))",
			"})));",
			"",
			"export default useStore;"
		],
		"description": "Utilisation de Devtools avec Zustand"
	}
}
