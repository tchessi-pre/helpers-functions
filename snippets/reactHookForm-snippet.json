{
	"React Hook Form Basic": {
		"prefix": "rhfBasic",
		"body": [
			"import React from 'react';",
			"import { useForm } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, formState: { errors } } = useForm();",
			"  const onSubmit = data => console.log(data);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <input {...register('${2:example}', { required: true })} />",
			"      {errors.${2:example} && <span>This field is required</span>}",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire de base avec React Hook Form"
	},
	"React Hook Form Validation": {
		"prefix": "rhfValidation",
		"body": [
			"import React from 'react';",
			"import { useForm } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, formState: { errors } } = useForm();",
			"  const onSubmit = data => console.log(data);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <input {...register('${2:example}', {",
			"        required: 'This field is required',",
			"        maxLength: {",
			"          value: 20,",
			"          message: 'Max length is 20'",
			"        }",
			"      })} />",
			"      {errors.${2:example} && <span>{errors.${2:example}.message}</span>}",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec validation dans React Hook Form"
	},
	"React Hook Form Error Handling": {
		"prefix": "rhfErrorHandling",
		"body": [
			"import React from 'react';",
			"import { useForm } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, formState: { errors } } = useForm();",
			"  const onSubmit = data => console.log(data);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <div>",
			"        <label>${2:Example}</label>",
			"        <input {...register('${2:example}', { required: 'This field is required' })} />",
			"        {errors.${2:example} && <p>{errors.${2:example}.message}</p>}",
			"      </div>",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec gestion des erreurs dans React Hook Form"
	},
	"React Hook Form Async Validation": {
		"prefix": "rhfAsyncValidation",
		"body": [
			"import React from 'react';",
			"import { useForm } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, formState: { errors } } = useForm();",
			"  const onSubmit = data => console.log(data);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <input {...register('${2:example}', {",
			"        required: 'This field is required',",
			"        validate: async value => {",
			"          const response = await fetch('/api/validate', {",
			"            method: 'POST',",
			"            body: JSON.stringify({ value })",
			"          });",
			"          const result = await response.json();",
			"          return result.isValid || 'Validation failed';",
			"        }",
			"      })} />",
			"      {errors.${2:example} && <span>{errors.${2:example}.message}</span>}",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec validation asynchrone dans React Hook Form"
	},
	"React Hook Form Material-UI": {
		"prefix": "rhfMaterialUI",
		"body": [
			"import React from 'react';",
			"import { useForm, Controller } from 'react-hook-form';",
			"import TextField from '@material-ui/core/TextField';",
			"import Button from '@material-ui/core/Button';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { control, handleSubmit, formState: { errors } } = useForm();",
			"  const onSubmit = data => console.log(data);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <Controller",
			"        name=\"${2:example}\"",
			"        control={control}",
			"        defaultValue=\"\"",
			"        rules={{ required: 'This field is required' }}",
			"        render={({ field }) => <TextField {...field} label=\"${2:Example}\" error={!!errors.${2:example}} helperText={errors.${2:example} ? errors.${2:example}.message : ''} />} />",
			"      <Button type=\"submit\" variant=\"contained\" color=\"primary\">Submit</Button>",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec React Hook Form et Material-UI"
	},
	"React Hook Form Yup Validation": {
		"prefix": "rhfYupValidation",
		"body": [
			"import React from 'react';",
			"import { useForm } from 'react-hook-form';",
			"import { yupResolver } from '@hookform/resolvers/yup';",
			"import * as Yup from 'yup';",
			"",
			"const schema = Yup.object().shape({",
			"  ${2:example}: Yup.string().required('This field is required').max(20, 'Max length is 20'),",
			"});",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, formState: { errors } } = useForm({",
			"    resolver: yupResolver(schema)",
			"  });",
			"  const onSubmit = data => console.log(data);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <input {...register('${2:example}')} />",
			"      {errors.${2:example} && <span>{errors.${2:example}.message}</span>}",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec validation de schéma Yup dans React Hook Form"
	},
	"React Hook Form Conditional Validation": {
		"prefix": "rhfConditionalValidation",
		"body": [
			"import React from 'react';",
			"import { useForm } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, watch, formState: { errors } } = useForm();",
			"  const onSubmit = data => console.log(data);",
			"  const watchField = watch('${2:fieldToWatch}', '');",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <input {...register('${2:fieldToWatch}')} />",
			"      {watchField === '${3:condition}' && (",
			"        <input {...register('${4:conditionalField}', { required: 'This field is required' })} />",
			"      )}",
			"      {errors.${4:conditionalField} && <span>{errors.${4:conditionalField}.message}</span>}",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec validation conditionnelle dans React Hook Form"
	},
	"React Hook Form Dynamic Fields": {
		"prefix": "rhfDynamicFields",
		"body": [
			"import React from 'react';",
			"import { useForm, useFieldArray } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, control, handleSubmit, formState: { errors } } = useForm();",
			"  const { fields, append, remove } = useFieldArray({",
			"    control,",
			"    name: '${2:dynamicFields}'",
			"  });",
			"  const onSubmit = data => console.log(data);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      {fields.map((item, index) => (",
			"        <div key={item.id}>",
			"<input {...register(`${2:dynamicFields}.${index}.name`, { required: 'This field is required' })} />",
			"          {errors.${2:dynamicFields} && errors.${2:dynamicFields}[index] && <span>{errors.${2:dynamicFields}[index].name.message}</span>}",
			"          <button type=\"button\" onClick={() => remove(index)}>Remove</button>",
			"        </div>",
			"      ))}",
			"      <button type=\"button\" onClick={() => append({ name: '' })}>Add Field</button>",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec champs dynamiques dans React Hook Form"
	},
	"React Hook Form Real-Time Update": {
		"prefix": "rhfRealTimeUpdate",
		"body": [
			"import React, { useEffect } from 'react';",
			"import { useForm } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm();",
			"  const onSubmit = data => console.log(data);",
			"  const watchedField = watch('${2:fieldToWatch}', '');",
			"",
			"  useEffect(() => {",
			"    // Custom logic to handle real-time updates",
			"    setValue('${3:fieldToUpdate}', watchedField);",
			"  }, [watchedField, setValue]);",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <input {...register('${2:fieldToWatch}')} />",
			"      <input {...register('${3:fieldToUpdate}')} />",
			"      {errors.${2:fieldToWatch} && <span>{errors.${2:fieldToWatch}.message}</span>}",
			"      <input type=\"submit\" />",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec mise à jour en temps réel dans React Hook Form"
	},
	"React Hook Form Async Submit": {
		"prefix": "rhfAsyncSubmit",
		"body": [
			"import React from 'react';",
			"import { useForm } from 'react-hook-form';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const { register, handleSubmit, formState: { errors, isSubmitting } } = useForm();",
			"  const onSubmit = async (data) => {",
			"    await new Promise(resolve => setTimeout(resolve, 2000));",
			"    console.log(data);",
			"  };",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit(onSubmit)}>",
			"      <input {...register('${2:example}', { required: 'This field is required' })} />",
			"      {errors.${2:example} && <span>{errors.${2:example}.message}</span>}",
			"      <button type=\"submit\" disabled={isSubmitting}>Submit</button>",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire avec soumission asynchrone dans React Hook Form"
	},
	"ShadCN Button": {
		"prefix": "shadcnButton",
		"body": [
			"import React from 'react';",
			"import { Button } from 'shadcn';",
			"",
			"const ${1:ButtonComponent} = () => {",
			"  return (",
			"    <Button onClick={() => console.log('Button clicked')}>",
			"      ${2:Click Me}",
			"    </Button>",
			"  );",
			"};",
			"",
			"export default ${1:ButtonComponent};"
		],
		"description": "Bouton ShadCN"
	},
	"ShadCN Modal": {
		"prefix": "shadcnModal",
		"body": [
			"import React, { useState } from 'react';",
			"import { Modal, Button } from 'shadcn';",
			"",
			"const ${1:ModalComponent} = () => {",
			"  const [isOpen, setIsOpen] = useState(false);",
			"",
			"  return (",
			"    <div>",
			"      <Button onClick={() => setIsOpen(true)}>Open Modal</Button>",
			"      <Modal isOpen={isOpen} onRequestClose={() => setIsOpen(false)}>",
			"        <h2>${2:Modal Title}</h2>",
			"        <p>${3:This is the modal content}</p>",
			"        <Button onClick={() => setIsOpen(false)}>Close</Button>",
			"      </Modal>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:ModalComponent};"
		],
		"description": "Modal ShadCN"
	},
	"ShadCN Card": {
		"prefix": "shadcnCard",
		"body": [
			"import React from 'react';",
			"import { Card, CardHeader, CardBody, CardFooter, Button } from 'shadcn';",
			"",
			"const ${1:CardComponent} = () => {",
			"  return (",
			"    <Card>",
			"      <CardHeader>",
			"        <h2>${2:Card Title}</h2>",
			"      </CardHeader>",
			"      <CardBody>",
			"        <p>${3:This is the card content}</p>",
			"      </CardBody>",
			"      <CardFooter>",
			"        <Button onClick={() => console.log('Button clicked')}>Click Me</Button>",
			"      </CardFooter>",
			"    </Card>",
			"  );",
			"};",
			"",
			"export default ${1:CardComponent};"
		],
		"description": "Carte ShadCN"
	},
	"ShadCN Navbar": {
		"prefix": "shadcnNavbar",
		"body": [
			"import React from 'react';",
			"import { Navbar, NavbarBrand, NavbarNav, NavItem, NavLink } from 'shadcn';",
			"",
			"const ${1:NavbarComponent} = () => {",
			"  return (",
			"    <Navbar>",
			"      <NavbarBrand href=\"#\">${2:Brand}</NavbarBrand>",
			"      <NavbarNav>",
			"        <NavItem>",
			"          <NavLink href=\"#\">${3:Home}</NavLink>",
			"        </NavItem>",
			"        <NavItem>",
			"          <NavLink href=\"#\">${4:About}</NavLink>",
			"        </NavItem>",
			"        <NavItem>",
			"          <NavLink href=\"#\">${5:Contact}</NavLink>",
			"        </NavItem>",
			"      </NavbarNav>",
			"    </Navbar>",
			"  );",
			"};",
			"",
			"export default ${1:NavbarComponent};"
		],
		"description": "Barre de navigation ShadCN"
	},
	"ShadCN Form": {
		"prefix": "shadcnForm",
		"body": [
			"import React from 'react';",
			"import { Form, FormGroup, Label, Input, Button } from 'shadcn';",
			"",
			"const ${1:FormComponent} = () => {",
			"  const handleSubmit = (event) => {",
			"    event.preventDefault();",
			"    console.log('Form submitted');",
			"  };",
			"",
			"  return (",
			"    <Form onSubmit={handleSubmit}>",
			"      <FormGroup>",
			"        <Label for=\"${2:exampleEmail}\">${3:Email}</Label>",
			"        <Input type=\"email\" name=\"email\" id=\"${2:exampleEmail}\" placeholder=\"${4:Enter your email}\" />",
			"      </FormGroup>",
			"      <FormGroup>",
			"        <Label for=\"${5:examplePassword}\">${6:Password}</Label>",
			"        <Input type=\"password\" name=\"password\" id=\"${5:examplePassword}\" placeholder=\"${7:Enter your password}\" />",
			"      </FormGroup>",
			"      <Button type=\"submit\">Submit</Button>",
			"    </Form>",
			"  );",
			"};",
			"",
			"export default ${1:FormComponent};"
		],
		"description": "Formulaire ShadCN"
	},
	"ShadCN Dropdown": {
		"prefix": "shadcnDropdown",
		"body": [
			"import React, { useState } from 'react';",
			"import { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'shadcn';",
			"",
			"const ${1:DropdownComponent} = () => {",
			"  const [isOpen, setIsOpen] = useState(false);",
			"",
			"  const toggle = () => setIsOpen(!isOpen);",
			"",
			"  return (",
			"    <Dropdown isOpen={isOpen} toggle={toggle}>",
			"      <DropdownToggle caret>",
			"        ${2:Dropdown}",
			"      </DropdownToggle>",
			"      <DropdownMenu>",
			"        <DropdownItem header>${3:Header}</DropdownItem>",
			"        <DropdownItem>${4:Action 1}</DropdownItem>",
			"        <DropdownItem>${5:Action 2}</DropdownItem>",
			"        <DropdownItem divider />",
			"        <DropdownItem>${6:Another Action}</DropdownItem>",
			"      </DropdownMenu>",
			"    </Dropdown>",
			"  );",
			"};",
			"",
			"export default ${1:DropdownComponent};"
		],
		"description": "Liste déroulante ShadCN"
	},
	"ShadCN Badge": {
		"prefix": "shadcnBadge",
		"body": [
			"import React from 'react';",
			"import { Badge } from 'shadcn';",
			"",
			"const ${1:BadgeComponent} = () => {",
			"  return (",
			"    <Badge color=\"${2:primary}\">",
			"      ${3:Badge Text}",
			"    </Badge>",
			"  );",
			"};",
			"",
			"export default ${1:BadgeComponent};"
		],
		"description": "Badge ShadCN"
	},
	"ShadCN Alert": {
		"prefix": "shadcnAlert",
		"body": [
			"import React from 'react';",
			"import { Alert } from 'shadcn';",
			"",
			"const ${1:AlertComponent} = () => {",
			"  return (",
			"    <Alert color=\"${2:danger}\">",
			"      ${3:This is an alert}",
			"    </Alert>",
			"  );",
			"};",
			"",
			"export default ${1:AlertComponent};"
		],
		"description": "Alerte ShadCN"
	},
	"ShadCN Table": {
		"prefix": "shadcnTable",
		"body": [
			"import React from 'react';",
			"import { Table } from 'shadcn';",
			"",
			"const ${1:TableComponent} = () => {",
			"  return (",
			"    <Table>",
			"      <thead>",
			"        <tr>",
			"          <th>${2:Header 1}</th>",
			"          <th>${3:Header 2}</th>",
			"          <th>${4:Header 3}</th>",
			"        </tr>",
			"      </thead>",
			"      <tbody>",
			"        <tr>",
			"          <td>${5:Data 1}</td>",
			"          <td>${6:Data 2}</td>",
			"          <td>${7:Data 3}</td>",
			"        </tr>",
			"        <tr>",
			"          <td>${8:Data 4}</td>",
			"          <td>${9:Data 5}</td>",
			"          <td>${10:Data 6}</td>",
			"        </tr>",
			"      </tbody>",
			"    </Table>",
			"  );",
			"};",
			"",
			"export default ${1:TableComponent};"
		],
		"description": "Table ShadCN"
	}
}
