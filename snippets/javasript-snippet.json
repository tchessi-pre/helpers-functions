{
	"useFetch": {
		"prefix": "useFetch",
		"body": [
			"import { useState, useEffect } from 'react';",
			"",
			"const useFetch = (url, options) => {",
			"  const [data, setData] = useState(null);",
			"  const [error, setError] = useState(null);",
			"  const [loading, setLoading] = useState(true);",
			"",
			"  useEffect(() => {",
			"    const fetchData = async () => {",
			"      try {",
			"        const response = await fetch(url, options);",
			"        if (!response.ok) {",
			"          throw new Error('Network response was not ok');",
			"        }",
			"        const result = await response.json();",
			"        setData(result);",
			"      } catch (error) {",
			"        setError(error);",
			"      } finally {",
			"        setLoading(false);",
			"      }",
			"    };",
			"",
			"    fetchData();",
			"  }, [url, options]);",
			"",
			"  return { data, error, loading };",
			"};",
			"",
			"export default useFetch;"
		],
		"description": "Custom useFetch hook for data fetching"
	},
	"useFetch with axios": {
		"prefix": "useFetchAxios",
		"body": [
			"import { useState, useEffect } from 'react';",
			"import axios from 'axios';",
			"",
			"const useFetch = (url, options) => {",
			"  const [data, setData] = useState(null);",
			"  const [error, setError] = useState(null);",
			"  const [loading, setLoading] = useState(true);",
			"",
			"  useEffect(() => {",
			"    const fetchData = async () => {",
			"      try {",
			"        const response = await axios(url, options);",
			"        setData(response.data);",
			"      } catch (error) {",
			"        setError(error);",
			"      } finally {",
			"        setLoading(false);",
			"      }",
			"    };",
			"",
			"    fetchData();",
			"  }, [url, options]);",
			"",
			"  return { data, error, loading };",
			"};",
			"",
			"export default useFetch;"
		],
		"description": "Custom useFetch hook with axios for data fetching"
	},
	"Promise": {
		"prefix": "promise",
		"body": [
			"const ${1:promiseName} = new Promise((resolve, reject) => {",
			"  ${2:// asynchronous operation}",
			"  if (${3:condition}) {",
			"    resolve(${4:result});",
			"  } else {",
			"    reject(${5:error});",
			"  }",
			"});",
			"",
			"${1:promiseName}",
			"  .then((result) => {",
			"    ${6:// handle success}",
			"  })",
			"  .catch((error) => {",
			"    ${7:// handle error}",
			"  });"
		],
		"description": "Create a new Promise"
	},
	"Fetch API with Async/Await": {
		"prefix": "fetchAsync",
		"body": [
			"const fetchData = async () => {",
			"  try {",
			"    const response = await fetch('${1:url}');",
			"    if (!response.ok) {",
			"      throw new Error('Network response was not ok');",
			"    }",
			"    const data = await response.json();",
			"    ${2:// handle data}",
			"  } catch (error) {",
			"    console.error('Fetch error:', error);",
			"  }",
			"};",
			"",
			"fetchData();"
		],
		"description": "Fetch data using async/await"
	},
	"Function Declaration": {
		"prefix": "func",
		"body": [
			"function ${1:functionName}(${2:params}) {",
			"  ${3:// function body}",
			"}"
		],
		"description": "Create a function declaration"
	},
	"Try-Catch Block": {
		"prefix": "trycatch",
		"body": [
			"try {",
			"  ${1:// try block}",
			"} catch (${2:error}) {",
			"  ${3:// catch block}",
			"}"
		],
		"description": "Create a try-catch block"
	},
	"Class Declaration": {
		"prefix": "class",
		"body": [
			"class ${1:ClassName} {",
			"  constructor(${2:params}) {",
			"    ${3:// constructor body}",
			"  }",
			"",
			"  ${4:methodName}(${5:params}) {",
			"    ${6:// method body}",
			"  }",
			"}"
		],
		"description": "Create a class declaration"
	},
	"useHover Hook": {
		"prefix": "useHover",
		"body": [
			"import { useState, useRef, useEffect } from 'react';",
			"",
			"const useHover = () => {",
			"  const [isHovered, setIsHovered] = useState(false);",
			"  const ref = useRef(null);",
			"",
			"  const handleMouseOver = () => setIsHovered(true);",
			"  const handleMouseOut = () => setIsHovered(false);",
			"",
			"  useEffect(() => {",
			"    const node = ref.current;",
			"    if (node) {",
			"      node.addEventListener('mouseover', handleMouseOver);",
			"      node.addEventListener('mouseout', handleMouseOut);",
			"",
			"      return () => {",
			"        node.removeEventListener('mouseover', handleMouseOver);",
			"        node.removeEventListener('mouseout', handleMouseOut);",
			"      };",
			"    }",
			"  }, [ref.current]);",
			"",
			"  return [ref, isHovered];",
			"};",
			"",
			"export default useHover;"
		],
		"description": "Custom useHover hook to detect hover state"
	},
	"useIsMobile Hook": {
		"prefix": "useIsMobile",
		"body": [
			"import { useState, useEffect } from 'react';",
			"",
			"const useIsMobile = (breakpoint = 600) => {",
			"  const [isMobile, setIsMobile] = useState(window.innerWidth < breakpoint);",
			"",
			"  useEffect(() => {",
			"    const handleResize = () => {",
			"      setIsMobile(window.innerWidth < breakpoint);",
			"    };",
			"",
			"    window.addEventListener('resize', handleResize);",
			"",
			"    return () => {",
			"      window.removeEventListener('resize', handleResize);",
			"    };",
			"  }, [breakpoint]);",
			"",
			"  return isMobile;",
			"};",
			"",
			"export default useIsMobile;"
		],
		"description": "Custom useIsMobile hook to detect if the user is on a mobile device"
	},
	"Axios Instance Configuration": {
		"prefix": "axiosInstance",
		"body": [
			"import axios from 'axios';",
			"",
			"// Configuration globale d'Axios",
			"const axiosInstance = axios.create({",
			"  baseURL: '${1:https://votre-api.com}', // Remplacez par l'URL de base de votre API",
			"  timeout: ${2:5000}, // Durée maximale d'attente pour les requêtes (en millisecondes)",
			"  headers: {",
			"    'Content-Type': 'application/json',",
			"    // Ajoutez d'autres en-têtes d'autorisation ou personnalisés ici si nécessaire",
			"  },",
			"});",
			"",
			"// Intercepteur de requête pour ajouter des en-têtes d'autorisation",
			"axiosInstance.interceptors.request.use((config) => {",
			"  // Récupérez le jeton d'authentification depuis le stockage local ou autre source",
			"  const authToken = localStorage.getItem('authToken');",
			"",
			"  // Ajoutez le jeton d'authentification aux en-têtes de la requête si disponible",
			"  if (authToken) {",
			"    config.headers.Authorization = `Bearer ${authToken}`;",
			"  }",
			"",
			"  return config;",
			"});",
			"",
			"// Intercepteur de réponse pour gérer les erreurs globales",
			"axiosInstance.interceptors.response.use(",
			"  (response) => response,",
			"  (error) => {",
			"    // Gérez les erreurs ici, par exemple, redirigez l'utilisateur vers une page d'erreur",
			"    console.error('Erreur de réponse globale :', error);",
			"    return Promise.reject(error);",
			"  }",
			");",
			"",
			"export default axiosInstance;"
		],
		"description": "Configure a global Axios instance with interceptors for requests and responses"
	},
	"useState snippet": {
		"prefix": "state",
		"body": [
			"const [${1:state}, set${2:State}] = useState(${3:initialState});"
		],
		"description": "useState initialization snippet"
	},
	"useEffect with import": {
		"prefix": "usef",
		"body": [
			"useEffect(() => {",
			"  ${1:// Your effect code here}",
			"}, [${2:dependencies}]);"
		],
		"description": "Import useEffect and initialize it with an effect"
	},
	"useRef with import": {
		"prefix": "useR",
		"body": [
			"import React, { useRef } from 'react';",
			"",
			"const ${1:ref} = useRef(${2:initialValue});"
		],
		"description": "Import useRef and initialize ref with an initial value"
	},
	"useMemo with import": {
		"prefix": "useM",
		"body": [
			"import React, { useMemo } from 'react';",
			"",
			"const ${1:memoizedValue} = useMemo(() => ${2:computeValue}, [${3:dependencies}]);"
		],
		"description": "Import useMemo and initialize with a memoized value"
	},
	"Create Custom Hook and Context": {
		"prefix": "Hook",
		"body": [
			"import React, { createContext, useContext, useState } from 'react';",
			"",
			"// Create Context",
			"const ${1:MyContext} = createContext();",
			"",
			"// Create Custom Hook",
			"const use${2:MyContext} = () => {",
			"  const context = useContext(${1:MyContext});",
			"  if (!context) {",
			"    throw new Error(`use${2:MyContext} must be used within a ${2:MyContext}Provider`);",
			"  }",
			"  return context;",
			"};",
			"",
			"// Create Provider Component",
			"const ${2:MyContext}Provider = ({ children }) => {",
			"  const [state, setState] = useState(${3:initialState});",
			"",
			"  return (",
			"    <${1:MyContext}.Provider value={[state, setState]}>",
			"      {children}",
			"    </${1:MyContext}.Provider>",
			"  );",
			"};",
			"",
			"export { ${1:MyContext}, use${2:MyContext}, ${2:MyContext}Provider };"
		],
		"description": "Create a custom hook and context with a provider"
	},
	"Authentication Handler without Context": {
		"prefix": "useAuth",
		"body": [
			"import React, { useState, useEffect } from 'react';",
			"import axios from 'axios';",
			"",
			"// Hook personnalisé pour gérer l'authentification",
			"const useAuth = () => {",
			"  const [user, setUser] = useState(null);",
			"  const [loading, setLoading] = useState(true);",
			"",
			"  // Vérifier l'état d'authentification au chargement",
			"  useEffect(() => {",
			"    const checkAuth = async () => {",
			"      try {",
			"        const response = await axios.get('/api/auth/status');",
			"        setUser(response.data.user);",
			"      } catch (error) {",
			"        console.error('Authentification échouée:', error);",
			"        setUser(null);",
			"      } finally {",
			"        setLoading(false);",
			"      }",
			"    };",
			"    checkAuth();",
			"  }, []);",
			"",
			"  // Fonction de connexion",
			"  const login = async (credentials) => {",
			"    try {",
			"      const response = await axios.post('/api/auth/login', credentials);",
			"      setUser(response.data.user);",
			"    } catch (error) {",
			"      console.error('Échec de la connexion:', error);",
			"      throw error;",
			"    }",
			"  };",
			"",
			"  // Fonction de déconnexion",
			"  const logout = async () => {",
			"    try {",
			"      await axios.post('/api/auth/logout');",
			"      setUser(null);",
			"    } catch (error) {",
			"      console.error('Échec de la déconnexion:', error);",
			"      throw error;",
			"    }",
			"  };",
			"",
			"  return { user, login, logout, loading };",
			"};",
			"",
			"export default useAuth;"
		],
		"description": "Create an authentication handler without context in React"
	},
	"useCreateUser with axios": {
		"prefix": "useCreateUser",
		"body": [
			"import { useState } from 'react';",
			"import axios from 'axios';",
			"",
			"const useCreateUser = (initialUrl) => {",
			"  const [loading, setLoading] = useState(false);",
			"  const [error, setError] = useState(null);",
			"  const [success, setSuccess] = useState(false);",
			"",
			"  const createUser = async (userData) => {",
			"    setLoading(true);",
			"    setError(null);",
			"    setSuccess(false);",
			"    try {",
			"      const response = await axios.post(initialUrl, userData);",
			"      setSuccess(true);",
			"    } catch (error) {",
			"      setError(error);",
			"    } finally {",
			"      setLoading(false);",
			"    }",
			"  };",
			"",
			"  return { createUser, loading, error, success };",
			"};",
			"",
			"export default useCreateUser;"
		],
		"description": "Custom useCreateUser hook with axios for creating a new user"
	},
	"useSession with sessionStorage": {
		"prefix": "useSession",
		"body": [
			"import { useState, useEffect } from 'react';",
			"",
			"const useSession = (key, initialValue) => {",
			"  const [session, setSession] = useState(() => {",
			"    const storedValue = sessionStorage.getItem(key);",
			"    return storedValue ? JSON.parse(storedValue) : initialValue;",
			"  });",
			"",
			"  useEffect(() => {",
			"    sessionStorage.setItem(key, JSON.stringify(session));",
			"  }, [key, session]);",
			"",
			"  const clearSession = () => {",
			"    sessionStorage.removeItem(key);",
			"    setSession(initialValue);",
			"  };",
			"",
			"  return [session, setSession, clearSession];",
			"};",
			"",
			"export default useSession;"
		],
		"description": "Custom useSession hook for managing session state with sessionStorage"
	},
	"useLocalStorage": {
		"prefix": "useLocalStorage",
		"body": [
			"import { useState, useEffect } from 'react';",
			"",
			"const useLocalStorage = (key, initialValue) => {",
			"  // State to store our value",
			"  const [storedValue, setStoredValue] = useState(() => {",
			"    try {",
			"      // Get from local storage by key",
			"      const item = window.localStorage.getItem(key);",
			"      // Parse stored json or if none return initialValue",
			"      return item ? JSON.parse(item) : initialValue;",
			"    } catch (error) {",
			"      console.log(error);",
			"      return initialValue;",
			"    }",
			"  });",
			"",
			"  // Return a wrapped version of useState's setter function that",
			"  // persists the new value to localStorage.",
			"  const setValue = (value) => {",
			"    try {",
			"      // Allow value to be a function so we have same API as useState",
			"      const valueToStore = value instanceof Function ? value(storedValue) : value;",
			"      // Save state",
			"      setStoredValue(valueToStore);",
			"      // Save to local storage",
			"      window.localStorage.setItem(key, JSON.stringify(valueToStore));",
			"    } catch (error) {",
			"      console.log(error);",
			"    }",
			"  };",
			"",
			"  return [storedValue, setValue];",
			"};",
			"",
			"export default useLocalStorage;"
		],
		"description": "Custom useLocalStorage hook for managing state with localStorage"
	},
	"useForm": {
		"prefix": "useForm",
		"body": [
			"import { useState } from 'react';",
			"",
			"const useForm = (initialValues) => {",
			"  const [values, setValues] = useState(initialValues);",
			"",
			"  const handleChange = (event) => {",
			"    const { name, value } = event.target;",
			"    setValues({",
			"      ...values,",
			"      [name]: value",
			"    });",
			"  };",
			"",
			"  const resetForm = () => {",
			"    setValues(initialValues);",
			"  };",
			"",
			"  return { values, handleChange, resetForm };",
			"};",
			"",
			"export default useForm;"
		],
		"description": "Custom useForm hook for managing form state"
	},
	"useWindowEvent": {
		"prefix": "useWindowEvent",
		"body": [
			"import { useEffect } from 'react';",
			"",
			"const useWindowEvent = (event, handler) => {",
			"  useEffect(() => {",
			"    window.addEventListener(event, handler);",
			"    return () => {",
			"      window.removeEventListener(event, handler);",
			"    };",
			"  }, [event, handler]);",
			"};",
			"",
			"export default useWindowEvent;"
		],
		"description": "Custom useWindowEvent hook for adding and removing window event listeners"
	},
	"useRefresh": {
		"prefix": "useRefresh",
		"body": [
			"import { useCallback } from 'react';",
			"",
			"const useRefresh = () => {",
			"  const refreshPage = useCallback(() => {",
			"    window.location.reload();",
			"  }, []);",
			"",
			"  return refreshPage;",
			"};",
			"",
			"export default useRefresh;"
		],
		"description": "Custom usePageRefresh hook for refreshing the page"
	},
	"React useOnlineStatus Hook": {
		"prefix": "useOnlineStatusHook",
		"body": [
			"import { useState, useEffect } from 'react';",
			"const useOnlineStatus = () => {",
			"  const [isOnline, setIsOnline] = useState(navigator.onLine);",
			"  useEffect(() => {",
			"    const handleOnline = () => setIsOnline(true);",
			"    const handleOffline = () => setIsOnline(false);",
			"    window.addEventListener('online', handleOnline);",
			"    window.addEventListener('offline', handleOffline);",
			"    return () => {",
			"      window.removeEventListener('online', handleOnline);",
			"      window.removeEventListener('offline', handleOffline);",
			"    };",
			"  }, []);",
			"  return isOnline;",
			"};",
			"// Exemple d'utilisation :",
			"import React from 'react';",
			"import useOnlineStatus from './useOnlineStatus';",
			"const MyComponent = () => {",
			"  const isOnline = useOnlineStatus();",
			"  return (",
			"    <div>",
			"      <p>Statut de la connexion en ligne : {isOnline ? 'En ligne' : 'Hors ligne'}</p>",
			"    </div>",
			"  );",
			"};",
			"export default MyComponent;"
		],
		"description": "Hook React personnalisé pour vérifier l'état de la connexion en ligne et exemple d'utilisation."
	},
	"React useDarkMode Hook": {
		"prefix": "useDarkModeHook",
		"body": [
			"import { useState, useEffect } from 'react';",
			"const useDarkMode = () => {",
			"  const [isDarkMode, setIsDarkMode] = useState(() => {",
			"    const savedMode = localStorage.getItem('darkMode');",
			"    return savedMode ? JSON.parse(savedMode) : false;",
			"  });",
			"  useEffect(() => {",
			"    localStorage.setItem('darkMode', JSON.stringify(isDarkMode));",
			"    if (isDarkMode) {",
			"      document.body.classList.add('dark-mode');",
			"    } else {",
			"      document.body.classList.remove('dark-mode');",
			"    }",
			"  }, [isDarkMode]);",
			"  const toggleDarkMode = () => {",
			"    setIsDarkMode(prevMode => !prevMode);",
			"  };",
			"  return [isDarkMode, toggleDarkMode];",
			"};",
			"export default useDarkMode;"
		],
		"description": "Hook React personnalisé pour gérer le mode sombre et exemple d'utilisation."
	},
	"Fetch Request": {
		"prefix": "fetch",
		"body": [
			"fetch(\"$1\")",
			" .then(response => response.json())",
			" .then(data => $2)",
			" .catch(error => console.error(error));"
		],
		"description": "Fetch request"
	},
	"Forgot Password Form": {
		"prefix": "forgotPasswordForm",
		"body": [
			"import React, { useState } from 'react';",
			"const ForgotPassword = () => {",
			"  const [email, setEmail] = useState('');",
			"  const [message, setMessage] = useState('');",
			"  const handleSubmit = async (e) => {",
			"    e.preventDefault();",
			"    try {",
			"      // Ajoutez ici votre logique d'appel à l'API pour réinitialiser le mot de passe",
			"      // Exemple: await api.resetPassword(email);",
			"      setMessage('Un email de réinitialisation a été envoyé à votre adresse email.');",
			"    } catch (error) {",
			"      setMessage('Une erreur est survenue. Veuillez réessayer.');",
			"    }",
			"  };",
			"  return (",
			"    <div className=\"forgot-password\">",
			"      <h2>Mot de Passe Oublié</h2>",
			"      <form onSubmit={handleSubmit}>",
			"        <div>",
			"          <label htmlFor=\"email\">Email :</label>",
			"          <input",
			"            type=\"email\"",
			"            id=\"email\"",
			"            value={email}",
			"            onChange={(e) => setEmail(e.target.value)}",
			"            required",
			"          />",
			"        </div>",
			"        <button type=\"submit\">Réinitialiser le mot de passe</button>",
			"      </form>",
			"      {message && <p>{message}</p>}",
			"    </div>",
			"  );",
			"};",
			"export default ForgotPassword;"
		],
		"description": "Formulaire de réinitialisation de mot de passe pour les utilisateurs ayant oublié leur mot de passe."
	},
	"Reset Password Form": {
		"prefix": "resetPasswordForm",
		"body": [
			"import React, { useState } from 'react';",
			"import { useParams } from 'react-router-dom';",
			"const ResetPassword = () => {",
			"  const { token } = useParams();",
			"  const [password, setPassword] = useState('');",
			"  const [confirmPassword, setConfirmPassword] = useState('');",
			"  const [message, setMessage] = useState('');",
			"  const handleSubmit = async (e) => {",
			"    e.preventDefault();",
			"    if (password !== confirmPassword) {",
			"      setMessage('Les mots de passe ne correspondent pas.');",
			"      return;",
			"    }",
			"    try {",
			"      // Ajoutez ici votre logique d'appel à l'API pour réinitialiser le mot de passe",
			"      // Exemple: await api.resetPassword(token, password);",
			"      setMessage('Votre mot de passe a été réinitialisé avec succès.');",
			"    } catch (error) {",
			"      setMessage('Une erreur est survenue. Veuillez réessayer.');",
			"    }",
			"  };",
			"  return (",
			"    <div className=\"reset-password\">",
			"      <h2>Réinitialiser le Mot de Passe</h2>",
			"      <form onSubmit={handleSubmit}>",
			"        <div>",
			"          <label htmlFor=\"password\">Nouveau Mot de Passe :</label>",
			"          <input",
			"            type=\"password\"",
			"            id=\"password\"",
			"            value={password}",
			"            onChange={(e) => setPassword(e.target.value)}",
			"            required",
			"          />",
			"        </div>",
			"        <div>",
			"          <label htmlFor=\"confirmPassword\">Confirmer le Nouveau Mot de Passe :</label>",
			"          <input",
			"            type=\"password\"",
			"            id=\"confirmPassword\"",
			"            value={confirmPassword}",
			"            onChange={(e) => setConfirmPassword(e.target.value)}",
			"            required",
			"          />",
			"        </div>",
			"        <button type=\"submit\">Réinitialiser le Mot de Passe</button>",
			"      </form>",
			"      {message && <p>{message}</p>}",
			"    </div>",
			"  );",
			"};",
			"export default ResetPassword;"
		],
		"description": "Formulaire de réinitialisation de mot de passe pour les utilisateurs ayant un token de réinitialisation."
	},
	"Login Form handleSubmit": {
		"prefix": "loginHandler",
		"body": [
			"const handleSubmit = async (e) => {",
			"  e.preventDefault();",
			"  const { email, password } = formData;",
			"  try {",
			"    // Ajoutez ici votre logique d'appel à l'API pour la connexion",
			"    // Exemple: await api.login(email, password);",
			"    setMessage('Connexion réussie.');",
			"  } catch (error) {",
			"    setMessage('Une erreur est survenue lors de la connexion. Veuillez réessayer.');",
			"  }",
			"};"
		],
		"description": "Fonction handleSubmit pour un formulaire de connexion"
	},
	"Signup Form handleSubmit": {
		"prefix": "signupHandler",
		"body": [
			"const handleSubmit = async (e) => {",
			"  e.preventDefault();",
			"  const { email, password, confirmPassword } = formData;",
			"  if (password !== confirmPassword) {",
			"    setMessage('Les mots de passe ne correspondent pas.');",
			"    return;",
			"  }",
			"  try {",
			"    // Ajoutez ici votre logique d'appel à l'API pour l'inscription",
			"    // Exemple: await api.signup(email, password);",
			"    setMessage('Inscription réussie.');",
			"  } catch (error) {",
			"    setMessage('Une erreur est survenue lors de l'inscription. Veuillez réessayer.');",
			"  }",
			"};"
		],
		"description": "Fonction handleSubmit pour un formulaire d'inscription"
	},
	"Contact Form handleSubmit": {
		"prefix": "contactHandler",
		"body": [
			"const handleSubmit = async (e) => {",
			"  e.preventDefault();",
			"  const { name, email, message } = formData;",
			"  try {",
			"    // Ajoutez ici votre logique d'appel à l'API pour envoyer le message de contact",
			"    // Exemple: await api.sendContactMessage({ name, email, message });",
			"    setMessage('Votre message a été envoyé avec succès.');",
			"  } catch (error) {",
			"    setMessage('Une erreur est survenue lors de l'envoi de votre message. Veuillez réessayer.');",
			"  }",
			"};"
		],
		"description": "Fonction handleSubmit pour un formulaire de contact"
	},
	"Profile Update Form handleSubmit": {
		"prefix": "editProfilHandler",
		"body": [
			"const handleSubmit = async (e) => {",
			"  e.preventDefault();",
			"  const { name, email } = formData;",
			"  try {",
			"    // Ajoutez ici votre logique d'appel à l'API pour la mise à jour du profil",
			"    // Exemple: await api.updateProfile({ name, email });",
			"    setMessage('Votre profil a été mis à jour avec succès.');",
			"  } catch (error) {",
			"    setMessage('Une erreur est survenue lors de la mise à jour de votre profil. Veuillez réessayer.');",
			"  }",
			"};"
		],
		"description": "Fonction handleSubmit pour un formulaire de mise à jour de profil"
	},
	"Change Password Form handleSubmit": {
		"prefix": "changePasswordHandler",
		"body": [
			"const handleSubmit = async (e) => {",
			"  e.preventDefault();",
			"  const { currentPassword, newPassword, confirmPassword } = formData;",
			"  if (newPassword !== confirmPassword) {",
			"    setMessage('Les nouveaux mots de passe ne correspondent pas.');",
			"    return;",
			"  }",
			"  try {",
			"    // Ajoutez ici votre logique d'appel à l'API pour le changement de mot de passe",
			"    // Exemple: await api.changePassword(currentPassword, newPassword);",
			"    setMessage('Votre mot de passe a été changé avec succès.');",
			"  } catch (error) {",
			"    setMessage('Une erreur est survenue lors du changement de mot de passe. Veuillez réessayer.');",
			"  }",
			"};"
		],
		"description": "Fonction handleSubmit pour un formulaire de changement de mot de passe"
	},
	"Format Date Helper": {
		"prefix": "formatDateHelper",
		"body": [
			"const formatDate = (date) => {",
			"  const options = { year: 'numeric', month: 'long', day: 'numeric' };",
			"  return new Date(date).toLocaleDateString(undefined, options);",
			"};",
			"export default formatDate;"
		],
		"description": "Fonction pour formater une date en une chaîne lisible"
	},
	"Generate UUID Helper": {
		"prefix": "generateIDHelper",
		"body": [
			"const generateUUID = () => {",
			"  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {",
			"    const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);",
			"    return v.toString(16);",
			"  });",
			"};",
			"export default generateUUID;"
		],
		"description": "Fonction pour générer un UUID"
	},
	"Is Empty Object Helper": {
		"prefix": "isEmptyObjectHelper",
		"body": [
			"const isEmptyObject = (obj) => {",
			"  return Object.keys(obj).length === 0;",
			"};",
			"export default isEmptyObject;"
		],
		"description": "Fonction pour vérifier si un objet est vide"
	},
	"Merge Objects Helper": {
		"prefix": "mergeObjectsHelper",
		"body": [
			"const mergeObjects = (obj1, obj2) => {",
			"  return { ...obj1, ...obj2 };",
			"};",
			"export default mergeObjects;"
		],
		"description": "Fonction pour fusionner deux objets"
	},
	"Validate Email Helper": {
		"prefix": "isValidEmailHelper",
		"body": [
			"const isValidEmail = (email) => {",
			"  const re = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;",
			"  return re.test(String(email).toLowerCase());",
			"};",
			"export default isValidEmail;"
		],
		"description": "Fonction pour vérifier si un émail est valide"
	},
	"Is Valid Phone Number Helper": {
		"prefix": "isValidPhoneNumberHelper",
		"body": [
			"const isValidPhoneNumber = (phoneNumber) => {",
			"  const re = /^\\+?[1-9]\\d{1,14}$/;",
			"  return re.test(phoneNumber);",
			"};",
			"export default isValidPhoneNumber;"
		],
		"description": "Fonction pour vérifier si un numéro de téléphone est valide"
	},
	"Is Valid URL Helper": {
		"prefix": "isValidURLHelper",
		"body": [
			"const isValidURL = (url) => {",
			"  const re = /^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$/;",
			"  return re.test(url);",
			"};",
			"export default isValidURL;"
		],
		"description": "Fonction pour vérifier si une URL est valide"
	},
	"Is Valid IP Address Helper": {
		"prefix": "isValidIPAddressHelper",
		"body": [
			"const isValidIPAddress = (ip) => {",
			"  const re = /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;",
			"  return re.test(ip);",
			"};",
			"export default isValidIPAddress;"
		],
		"description": "Fonction pour vérifier si une adresse IP est valide"
	},
	"Is Empty or Whitespace Helper": {
		"prefix": "isEmptyOrWhitespaceHelper",
		"body": [
			"const isEmptyOrWhitespace = (str) => {",
			"  return !str || str.trim().length === 0;",
			"};",
			"export default isEmptyOrWhitespace;"
		],
		"description": "Fonction pour vérifier si une chaîne est vide ou contient seulement des espaces blancs"
	},
	"Is Number Helper": {
		"prefix": "isNumberHelper",
		"body": [
			"const isNumber = (value) => {",
			"  return typeof value === 'number' && isFinite(value);",
			"};",
			"export default isNumber;"
		],
		"description": "Fonction pour vérifier si une valeur est un nombre"
	},
	"Is Array Helper": {
		"prefix": "isArrayHelper",
		"body": [
			"const isArray = (value) => {",
			"  return Array.isArray(value);",
			"};",
			"export default isArray;"
		],
		"description": "Fonction pour vérifier si une valeur est un tableau"
	},
	"Is Valid JSON Helper": {
		"prefix": "isValidJSONHelper",
		"body": [
			"const isValidJSON = (str) => {",
			"  try {",
			"    JSON.parse(str);",
			"    return true;",
			"  } catch (e) {",
			"    return false;",
			"  }",
			"};",
			"export default isValidJSON;"
		],
		"description": "Fonction pour vérifier si une chaîne est un JSON valide"
	},
	"Get URL Params Helper": {
		"prefix": "getUrlParamsHelper",
		"body": [
			"export function getUrlParams(url) {",
			"  const params = {};",
			"  new URL(url).searchParams.forEach((value, key) => {",
			"    params[key] = value;",
			"  });",
			"  return params;",
			"};"
		],
		"description": "Fonction pour obtenir les paramètres d'une URL sous forme d'objet"
	},
	"Build URL with Params Helper": {
		"prefix": "buildUrlWithParamsHelper",
		"body": [
			"export function buildUrlWithParams(baseUrl, params) {",
			"  const url = new URL(baseUrl);",
			"  Object.keys(params).forEach((key) => {",
			"    url.searchParams.append(key, params[key]);",
			"  });",
			"  return url.toString();",
			"};"
		],
		"description": "Fonction pour générer une URL avec des paramètres"
	},
	"Axios Configuration": {
		"prefix": "axiosConfig",
		"body": [
			"import axios from 'axios';",
			"",
			"// Configuration globale d'Axios",
			"const axiosInstance = axios.create({",
			"  baseURL: 'https://votre-api.com', // Remplacez par l'URL de base de votre API",
			"  timeout: 5000, // Durée maximale d'attente pour les requêtes (en millisecondes)",
			"  headers: {",
			"    'Content-Type': 'application/json',",
			"    // Ajoutez d'autres en-têtes d'autorisation ou personnalisés ici si nécessaire",
			"  },",
			"});",
			"",
			"// Intercepteur de requête pour ajouter des en-têtes d'autorisation",
			"axiosInstance.interceptors.request.use((config) => {",
			"  // Récupérez le jeton d'authentification depuis le stockage local ou autre source",
			"  const authToken = localStorage.getItem('authToken');",
			"",
			"  // Ajoutez le jeton d'authentification aux en-têtes de la requête si disponible",
			"  if (authToken) {",
			"    config.headers.Authorization = `Bearer ${authToken}`;",
			"  }",
			"",
			"  return config;",
			"});",
			"",
			"// Intercepteur de réponse pour gérer les erreurs globales",
			"axiosInstance.interceptors.response.use(",
			"  (response) => response,",
			"  (error) => {",
			"    // Gérez les erreurs ici, par exemple, redirigez l'utilisateur vers une page d'erreur",
			"    console.error('Erreur de réponse globale :', error);",
			"    return Promise.reject(error);",
			"  }",
			");",
			"",
			"export default axiosInstance;"
		],
		"description": "Configuration globale d'Axios avec intercepteurs de requête et de réponse"
	},
	"Reusable Form Component": {
		"prefix": "formComponent",
		"body": [
			"import React, { useState } from 'react';",
			"",
			"const ReusableForm = ({ initialValues, validate, onSubmit }) => {",
			"  const [values, setValues] = useState(initialValues);",
			"  const [errors, setErrors] = useState({});",
			"",
			"  const handleChange = (e) => {",
			"    const { name, value } = e.target;",
			"    setValues({",
			"      ...values,",
			"      [name]: value",
			"    });",
			"  };",
			"",
			"  const handleSubmit = (e) => {",
			"    e.preventDefault();",
			"    const validationErrors = validate(values);",
			"    setErrors(validationErrors);",
			"    if (Object.keys(validationErrors).length === 0) {",
			"      onSubmit(values);",
			"    }",
			"  };",
			"",
			"  return (",
			"    <form onSubmit={handleSubmit}>",
			"      {Object.keys(initialValues).map((key) => (",
			"        <div key={key}>",
			"          <label htmlFor={key}>{key}</label>",
			"          <input",
			"            type='text'",
			"            id={key}",
			"            name={key}",
			"            value={values[key]}",
			"            onChange={handleChange}",
			"          />",
			"          {errors[key] && <p>{errors[key]}</p>}",
			"        </div>",
			"      ))}",
			"      <button type='submit'>Submit</button>",
			"    </form>",
			"  );",
			"};",
			"",
			"export default ReusableForm;"
		],
		"description": "Composant de formulaire réutilisable avec validation"
	},
	"Auth Context": {
		"prefix": "authContext",
		"body": [
			"import React, { createContext, useState, useContext } from 'react';",
			"",
			"const AuthContext = createContext();",
			"",
			"export const AuthProvider = ({ children }) => {",
			"  const [user, setUser] = useState(null);",
			"",
			"  const login = (userData) => {",
			"    setUser(userData);",
			"  };",
			"",
			"  const logout = () => {",
			"    setUser(null);",
			"  };",
			"",
			"  return (",
			"    <AuthContext.Provider value={{ user, login, logout }}>",
			"      {children}",
			"    </AuthContext.Provider>",
			"  );",
			"};",
			"",
			"export const useAuth = () => useContext(AuthContext);"
		],
		"description": "Contexte pour l'authentification avec Context API"
	},
	"Multer Basic Configuration": {
		"prefix": "multerConfig",
		"body": [
			"const multer = require('multer');",
			"",
			"// Configuration de stockage de Multer",
			"const storage = multer.diskStorage({",
			"  destination: function (req, file, cb) {",
			"    cb(null, 'uploads/'); // Spécifiez le dossier de destination",
			"  },",
			"  filename: function (req, file, cb) {",
			"    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);",
			"    cb(null, file.fieldname + '-' + uniqueSuffix + '-' + file.originalname);",
			"  }",
			"});",
			"",
			"// Filtrage des fichiers (optionnel)",
			"const fileFilter = (req, file, cb) => {",
			"  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {",
			"    cb(null, true);",
			"  } else {",
			"    cb(new Error('Type de fichier non supporté'), false);",
			"  }",
			"};",
			"",
			"// Configuration de Multer",
			"const upload = multer({",
			"  storage: storage,",
			"  limits: {",
			"    fileSize: 1024 * 1024 * 5 // Limite de taille de fichier (5 Mo)",
			"  },",
			"  fileFilter: fileFilter",
			"});",
			"",
			"module.exports = upload;"
		],
		"description": "Configuration de base de Multer pour l'upload de fichiers"
	},
	"JavaScript Encryption Utility": {
		"prefix": "jsEncryption",
		"body": [
			"const crypto = require('crypto');",
			"",
			"const algorithm = 'aes-256-ctr';",
			"const secretKey = process.env.ENCRYPTION_KEY || 'vOVH6sdmpNWjRRIqCc7rdxs01lwHzfr3';",
			"",
			"function encrypt(text) {",
			"  const iv = crypto.randomBytes(16);",
			"  const cipher = crypto.createCipheriv(algorithm, secretKey, iv);",
			"  const encrypted = Buffer.concat([cipher.update(text), cipher.final()]);",
			"",
			"  return {",
			"    iv: iv.toString('hex'),",
			"    content: encrypted.toString('hex')",
			"  };",
			"}",
			"",
			"function decrypt(hash) {",
			"  const decipher = crypto.createDecipheriv(algorithm, secretKey, Buffer.from(hash.iv, 'hex'));",
			"  const decrypted = Buffer.concat([decipher.update(Buffer.from(hash.content, 'hex')), decipher.final()]);",
			"",
			"  return decrypted.toString();",
			"}",
			"",
			"module.exports = { encrypt, decrypt };"
		],
		"description": "Utilitaire de chiffrement en JavaScript"
	}
}
