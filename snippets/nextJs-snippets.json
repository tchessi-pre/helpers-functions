{
	"Next.js getStaticPaths": {
		"prefix": "nextStaticPaths",
		"body": [
			"export async function getStaticPaths() {",
			"  // Fetch data from an API or other source",
			"  const res = await fetch('https://api.example.com/items');",
			"  const items = await res.json();",
			"",
			"  const paths = items.map((item) => ({",
			"    params: { id: item.id.toString() },",
			"  }));",
			"",
			"  return {",
			"    paths,",
			"    fallback: false,",
			"  };",
			"}",
			"",
			"export async function getStaticProps({ params }) {",
			"  // Fetch data for a single item",
			"  const res = await fetch(`https://api.example.com/items/${params.id}`);",
			"  const item = await res.json();",
			"",
			"  return {",
			"    props: {",
			"      item,",
			"    },",
			"  };",
			"}",
			"",
			"const ${1:PageName} = ({ item }) => {",
			"  return (",
			"    <div>",
			"      <h1>{item.name}</h1>",
			"      <pre>{JSON.stringify(item, null, 2)}</pre>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:PageName};"
		],
		"description": "Utilisation de getStaticPaths et getStaticProps dans Next.js"
	},
	"Next.js getServerSideProps": {
		"prefix": "nextServerSideProps",
		"body": [
			"export async function getServerSideProps() {",
			"  // Fetch data from an API or other source",
			"  const res = await fetch('https://api.example.com/data');",
			"  const data = await res.json();",
			"",
			"  return {",
			"    props: {",
			"      data,",
			"    },",
			"  };",
			"}",
			"",
			"const ${1:PageName} = ({ data }) => {",
			"  return (",
			"    <div>",
			"      <h1>${1:PageName}</h1>",
			"      <pre>{JSON.stringify(data, null, 2)}</pre>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:PageName};"
		],
		"description": "Utilisation de getServerSideProps dans Next.js"
	},
	"Next.js useEffect and useState": {
		"prefix": "nextUseEffectUseState",
		"body": [
			"import React, { useEffect, useState } from 'react';",
			"",
			"const ${1:ComponentName} = () => {",
			"  const [data, setData] = useState(null);",
			"",
			"  useEffect(() => {",
			"    const fetchData = async () => {",
			"      const res = await fetch('https://api.example.com/data');",
			"      const result = await res.json();",
			"      setData(result);",
			"    };",
			"",
			"    fetchData();",
			"  }, []);",
			"",
			"  if (!data) return <div>Loading...</div>;",
			"",
			"  return (",
			"    <div>",
			"      <h1>${1:ComponentName}</h1>",
			"      <pre>{JSON.stringify(data, null, 2)}</pre>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:ComponentName};"
		],
		"description": "Composant Next.js utilisant useEffect et useState"
	},
	"Next.js API Route": {
		"prefix": "nextApiRoute",
		"body": [
			"import { NextApiRequest, NextApiResponse } from 'next';",
			"",
			"export default (req: NextApiRequest, res: NextApiResponse) => {",
			"  res.status(200).json({ message: 'Hello from Next.js API' });",
			"};"
		],
		"description": "Création d'une API Route Next.js"
	},
	"Next.js getInitialProps": {
		"prefix": "nextGetInitialProps",
		"body": [
			"import React from 'react';",
			"",
			"const ${1:PageName} = (props) => {",
			"  return (",
			"    <div>",
			"      <h1>${1:PageName}</h1>",
			"      <pre>{JSON.stringify(props.data, null, 2)}</pre>",
			"    </div>",
			"  );",
			"};",
			"",
			"${1:PageName}.getInitialProps = async (ctx) => {",
			"  // Fetch data from an API or other source",
			"  const res = await fetch('https://api.example.com/data');",
			"  const data = await res.json();",
			"",
			"  return { data };",
			"};",
			"",
			"export default ${1:PageName};"
		],
		"description": "Utilisation de getInitialProps dans Next.js"
	},
	"Next.js Redux Page": {
		"prefix": "nextReduxPage",
		"body": [
			"import React from 'react';",
			"import { connect } from 'react-redux';",
			"",
			"const ${1:PageName} = ({ ${2:state}, ${3:dispatch} }) => {",
			"  return (",
			"    <div>",
			"      <h1>${1:PageName}</h1>",
			"      <pre>{JSON.stringify(${2:state}, null, 2)}</pre>",
			"    </div>",
			"  );",
			"};",
			"",
			"const mapStateToProps = (state) => ({",
			"  ${2:state}: state.${2:state}",
			"});",
			"",
			"export default connect(mapStateToProps)(${1:PageName});"
		],
		"description": "Configuration de Redux dans une page Next.js"
	},
	"Next.js Formik Form": {
		"prefix": "nextFormikForm",
		"body": [
			"import React from 'react';",
			"import { Formik, Form, Field, ErrorMessage } from 'formik';",
			"import * as Yup from 'yup';",
			"",
			"const ${1:FormName} = () => {",
			"  const initialValues = {",
			"    ${2:field1}: '',",
			"    ${3:field2}: ''",
			"  };",
			"",
			"  const validationSchema = Yup.object({",
			"    ${2:field1}: Yup.string().required('Required'),",
			"    ${3:field2}: Yup.string().required('Required')",
			"  });",
			"",
			"  const onSubmit = (values, { setSubmitting }) => {",
			"    setTimeout(() => {",
			"      console.log(values);",
			"      setSubmitting(false);",
			"    }, 400);",
			"  };",
			"",
			"  return (",
			"    <Formik",
			"      initialValues={initialValues}",
			"      validationSchema={validationSchema}",
			"      onSubmit={onSubmit}",
			"    >",
			"      {({ isSubmitting }) => (",
			"        <Form>",
			"          <div>",
			"            <label htmlFor=\"${2:field1}\">${2:Field1}</label>",
			"            <Field type=\"text\" name=\"${2:field1}\" />",
			"            <ErrorMessage name=\"${2:field1}\" component=\"div\" />",
			"          </div>",
			"          <div>",
			"            <label htmlFor=\"${3:field2}\">${3:Field2}</label>",
			"            <Field type=\"text\" name=\"${3:field2}\" />",
			"            <ErrorMessage name=\"${3:field2}\" component=\"div\" />",
			"          </div>",
			"          <button type=\"submit\" disabled={isSubmitting}>",
			"            Submit",
			"          </button>",
			"        </Form>",
			"      )}",
			"    </Formik>",
			"  );",
			"};",
			"",
			"export default ${1:FormName};"
		],
		"description": "Création d'un formulaire avec Formik dans Next.js"
	},
	"Next.js _document.js": {
		"prefix": "nextDocument",
		"body": [
			"import Document, { Html, Head, Main, NextScript } from 'next/document';",
			"",
			"class MyDocument extends Document {",
			"  static async getInitialProps(ctx) {",
			"    const initialProps = await Document.getInitialProps(ctx);",
			"    return { ...initialProps };",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <Html>",
			"        <Head>",
			"          {/* Add custom meta tags, stylesheets, etc. here */}",
			"        </Head>",
			"        <body>",
			"          <Main />",
			"          <NextScript />",
			"        </body>",
			"      </Html>",
			"    );",
			"  }",
			"}",
			"",
			"export default MyDocument;"
		],
		"description": "Configuration du fichier _document.js dans Next.js"
	},
	"Next.js useRouter": {
		"prefix": "nextUseRouter",
		"body": [
			"import { useRouter } from 'next/router';",
			"import React, { useEffect } from 'react';",
			"",
			"const ${1:ComponentName} = () => {",
			"  const router = useRouter();",
			"",
			"  useEffect(() => {",
			"    // Add logic to handle route changes or fetch data based on router.query",
			"    console.log(router.query);",
			"  }, [router.query]);",
			"",
			"  return (",
			"    <div>",
			"      <h1>${1:ComponentName}</h1>",
			"      <p>Current Route: {router.pathname}</p>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:ComponentName};"
		],
		"description": "Utilisation de useRouter dans un composant Next.js"
	},
	"Next.js Centralized Routes": {
		"prefix": "nextCentralizedRoutes",
		"body": [
			"export const routes = {",
			"  home: '/',",
			"  about: '/about',",
			"  contact: '/contact',",
			"  dynamicRoute: (id) => `/dynamic/${id}`,",
			"  anotherDynamicRoute: (category, id) => `/category/${category}/item/${id}`",
			"};"
		],
		"description": "Définition des routes dans un fichier centralisé pour Next.js"
	},
	"Next.js Use Centralized Routes": {
		"prefix": "nextUseCentralizedRoutes",
		"body": [
			"import React from 'react';",
			"import Link from 'next/link';",
			"import { routes } from './routes';",
			"",
			"const ${1:ComponentName} = () => {",
			"  return (",
			"    <div>",
			"      <h1>Navigation</h1>",
			"      <ul>",
			"        <li><Link href={routes.home}><a>Home</a></Link></li>",
			"        <li><Link href={routes.about}><a>About</a></Link></li>",
			"        <li><Link href={routes.contact}><a>Contact</a></Link></li>",
			"        <li><Link href={routes.dynamicRoute(1)}><a>Dynamic Route 1</a></Link></li>",
			"        <li><Link href={routes.anotherDynamicRoute('category1', 2)}><a>Category 1, Item 2</a></Link></li>",
			"      </ul>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:ComponentName};"
		],
		"description": "Utilisation des routes centralisées dans un composant Next.js"
	},
	"Next.js Create Shadows Utility": {
		"prefix": "nextShadows",
		"body": [
			"export const createShadows = () => {",
			"  return [",
			"    'none',",
			"    '0px 1px 2px rgba(0, 0, 0, 0.08)',",
			"    '0px 1px 5px rgba(0, 0, 0, 0.08)',",
			"    '0px 1px 8px rgba(0, 0, 0, 0.08)',",
			"    '0px 1px 10px rgba(0, 0, 0, 0.08)',",
			"    '0px 1px 14px rgba(0, 0, 0, 0.08)',",
			"    '0px 1px 18px rgba(0, 0, 0, 0.08)',",
			"    '0px 2px 16px rgba(0, 0, 0, 0.08)',",
			"    '0px 3px 14px rgba(0, 0, 0, 0.08)',",
			"    '0px 3px 16px rgba(0, 0, 0, 0.08)',",
			"    '0px 4px 18px rgba(0, 0, 0, 0.08)',",
			"    '0px 4px 20px rgba(0, 0, 0, 0.08)',",
			"    '0px 5px 22px rgba(0, 0, 0, 0.08)',",
			"    '0px 5px 24px rgba(0, 0, 0, 0.08)',",
			"    '0px 5px 26px rgba(0, 0, 0, 0.08)',",
			"    '0px 6px 28px rgba(0, 0, 0, 0.08)',",
			"    '0px 6px 30px rgba(0, 0, 0, 0.08)',",
			"    '0px 6px 32px rgba(0, 0, 0, 0.08)',",
			"    '0px 7px 34px rgba(0, 0, 0, 0.08)',",
			"    '0px 7px 36px rgba(0, 0, 0, 0.08)',",
			"    '0px 8px 38px rgba(0, 0, 0, 0.08)',",
			"    '0px 8px 40px rgba(0, 0, 0, 0.08)',",
			"    '0px 8px 42px rgba(0, 0, 0, 0.08)',",
			"    '0px 9px 44px rgba(0, 0, 0, 0.08)',",
			"    '0px 9px 46px rgba(0, 0, 0, 0.08)'",
			"  ];",
			"};"
		],
		"description": "Utilitaire de création de box-shadow dans Next.js"
	},
	"Next.js Context API": {
		"prefix": "nextContextAPI",
		"body": [
			"import React, { createContext, useContext, useState } from 'react';",
			"",
			"const ${1:ExampleContext} = createContext();",
			"",
			"export const ${1:ExampleProvider} = ({ children }) => {",
			"  const [state, setState] = useState(null);",
			"",
			"  return (",
			"    <${1:ExampleContext}.Provider value={{ state, setState }}>",
			"      {children}",
			"    </${1:ExampleContext}.Provider>",
			"  );",
			"};",
			"",
			"export const use${1:ExampleContext} = () => useContext(${1:ExampleContext});"
		],
		"description": "Création et utilisation du Context API dans Next.js"
	},
	"Next.js _app.js Configuration": {
		"prefix": "nextAppJsConfig",
		"body": [
			"import React from 'react';",
			"import { Provider } from 'react-redux';",
			"import { createStore } from 'redux';",
			"import { ThemeProvider } from 'styled-components';",
			"import rootReducer from '../reducers';",
			"",
			"const store = createStore(rootReducer);",
			"",
			"const theme = {",
			"  colors: {",
			"    primary: '#0070f3',",
			"  },",
			"};",
			"",
			"export default function App({ Component, pageProps }) {",
			"  return (",
			"    <Provider store={store}>",
			"      <ThemeProvider theme={theme}>",
			"        <Component {...pageProps} />",
			"      </ThemeProvider>",
			"    </Provider>",
			"  );",
			"}"
		],
		"description": "Configuration du fichier _app.js avec Redux et Styled Components dans Next.js"
	},
	"Next.js Custom Error Page": {
		"prefix": "nextCustomErrorPage",
		"body": [
			"import React from 'react';",
			"",
			"const ErrorPage = ({ statusCode }) => {",
			"  return (",
			"    <div>",
			"      <h1>{statusCode ? `An error ${statusCode} occurred on server` : 'An error occurred on client'}</h1>",
			"    </div>",
			"  );",
			"};",
			"",
			"ErrorPage.getInitialProps = ({ res, err }) => {",
			"  const statusCode = res ? res.statusCode : err ? err.statusCode : 404;",
			"  return { statusCode };",
			"};",
			"",
			"export default ErrorPage;"
		],
		"description": "Création d'une page d'erreur personnalisée dans Next.js"
	},
	"Next.js NextAuth Configuration": {
		"prefix": "nextAuthConfig",
		"body": [
			"import NextAuth from 'next-auth';",
			"import Providers from 'next-auth/providers';",
			"",
			"export default NextAuth({",
			"  providers: [",
			"    Providers.Google({",
			"      clientId: process.env.GOOGLE_CLIENT_ID,",
			"      clientSecret: process.env.GOOGLE_CLIENT_SECRET",
			"    }),",
			"    Providers.Facebook({",
			"      clientId: process.env.FACEBOOK_CLIENT_ID,",
			"      clientSecret: process.env.FACEBOOK_CLIENT_SECRET",
			"    })",
			"  ],",
			"  callbacks: {",
			"    async signIn(user, account, profile) {",
			"      return true;",
			"    },",
			"    async redirect(url, baseUrl) {",
			"      return baseUrl;",
			"    },",
			"    async session(session, user) {",
			"      return session;",
			"    },",
			"    async jwt(token, user, account, profile, isNewUser) {",
			"      return token;",
			"    }",
			"  }",
			"});"
		],
		"description": "Configuration de NextAuth.js pour l'authentification dans Next.js"
	},
	"Next.js Server-Side Redirection": {
		"prefix": "nextServerSideRedirect",
		"body": [
			"export async function getServerSideProps(context) {",
			"  return {",
			"    redirect: {",
			"      destination: '/new-destination',",
			"      permanent: false,",
			"    },",
			"  };",
			"}",
			"",
			"const ${1:RedirectPage} = () => {",
			"  return <div>Redirecting...</div>;",
			"};",
			"",
			"export default ${1:RedirectPage};"
		],
		"description": "Redirection côté serveur avec getServerSideProps dans Next.js"
	},
	"Next.js Client-Side Redirection": {
		"prefix": "nextClientSideRedirect",
		"body": [
			"import { useEffect } from 'react';",
			"import { useRouter } from 'next/router';",
			"",
			"const ${1:RedirectComponent} = () => {",
			"  const router = useRouter();",
			"",
			"  useEffect(() => {",
			"    router.push('/new-destination');",
			"  }, [router]);",
			"",
			"  return <div>Redirecting...</div>;",
			"};",
			"",
			"export default ${1:RedirectComponent};"
		],
		"description": "Redirection côté client avec useRouter dans Next.js"
	},
	"Next.js SWR Hook": {
		"prefix": "nextSWRHook",
		"body": [
			"import useSWR from 'swr';",
			"",
			"const fetcher = (url) => fetch(url).then((res) => res.json());",
			"",
			"const ${1:ComponentName} = () => {",
			"  const { data, error } = useSWR('/api/data', fetcher);",
			"",
			"  if (error) return <div>Failed to load</div>;",
			"  if (!data) return <div>Loading...</div>;",
			"",
			"  return (",
			"    <div>",
			"      <h1>Data:</h1>",
			"      <pre>{JSON.stringify(data, null, 2)}</pre>",
			"    </div>",
			"  );",
			"};",
			"",
			"export default ${1:ComponentName};"
		],
		"description": "Utilisation de SWR pour la gestion des données dans Next.js"
	},
	"Next.js Redux Toolkit Integration": {
		"prefix": "nextReduxToolkit",
		"body": [
			"import { configureStore, createSlice } from '@reduxjs/toolkit';",
			"import { Provider, useDispatch, useSelector } from 'react-redux';",
			"",
			"const ${1:exampleSlice} = createSlice({",
			"  name: '${1:exampleSlice}',",
			"  initialState: 0,",
			"  reducers: {",
			"    increment: state => state + 1,",
			"    decrement: state => state - 1",
			"  }",
			"});",
			"",
			"const store = configureStore({",
			"  reducer: {",
			"    ${1:exampleSlice}: ${1:exampleSlice}.reducer",
			"  }",
			"});",
			"",
			"const ${2:ComponentName} = () => {",
			"  const dispatch = useDispatch();",
			"  const count = useSelector(state => state.${1:exampleSlice});",
			"  return (",
			"    <div>",
			"      <p>{count}</p>",
			"      <button onClick={() => dispatch(${1:exampleSlice}.actions.increment())}>Increment</button>",
			"      <button onClick={() => dispatch(${1:exampleSlice}.actions.decrement())}>Decrement</button>",
			"    </div>",
			"  );",
			"};",
			"",
			"const App = ({ Component, pageProps }) => {",
			"  return (",
			"    <Provider store={store}>",
			"      <Component {...pageProps} />",
			"    </Provider>",
			"  );",
			"};",
			"",
			"export default App;"
		],
		"description": "Intégration de Redux Toolkit dans Next.js"
	}
}
